import re
from contextlib import suppress
from typing import List

from xplane_airports.types import RowCode


class AptDatLine:
    """
    A single line from an apt.dat file.
    """
    __slots__ = ('raw', 'row_code')

    def __init__(self, line_text: str):
        self.raw = line_text.strip()
        self.row_code = self.raw.split(' ', 1)[0]
        with suppress(ValueError):
            self.row_code = int(self.row_code)

    def is_runway(self) -> bool:
        """
        :returns: True if this line represents a land runway, waterway, or helipad
        """
        return self.row_code in (RowCode.LAND_RUNWAY, RowCode.WATER_RUNWAY, RowCode.HELIPAD)

    def is_ignorable(self) -> bool:
        """
        :returns: True if this line carries no semantic value for any airport in the apt.dat file.
        """
        return self.row_code == RowCode.FILE_END or self.is_file_header() or not self.raw

    def is_airport_header(self) -> bool:
        """
        :returns: True if this line marks the beginning of an airport, seaport, or heliport
        """
        return self.row_code in (RowCode.AIRPORT_HEADER, RowCode.SEAPORT_HEADER, RowCode.HELIPORT_HEADER)

    def is_file_header(self) -> bool:
        """
        :returns: True if this is part of an apt.dat file header
        """
        return self.row_code in ['I', 'A'] or "Generated by WorldEditor" in self.raw

    @property
    def runway_type(self) -> RowCode:
        """
        :returns: The type of runway represented by this line
        """
        assert self.is_runway()
        return RowCode(self.row_code)

    @property
    def tokens(self) -> List[str]:
        """
        :returns: The tokens in this line
        """
        return str(self).split(' ')

    def __str__(self):
        return re.sub(' +', ' ', self.raw)  # Replace multiple spaces with a single

    def __repr__(self):
        return self.raw

    def __bool__(self):
        return not self.is_ignorable()
